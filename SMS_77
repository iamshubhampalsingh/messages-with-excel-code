import uiautomator2 as ui2
import time
import subprocess
import pandas as pd
from datetime import datetime

# Define the initial swipe coordinates
start_x = 500
start_y = 500
end_y = 1500
swipe_duration = 0.5

# Perform multiple swipes to scroll the screen downwards
num_swipes = 5  # Adjust the number of swipes as needed
for _ in range(num_swipes):
    receiver_device.swipe(start_x, start_y, start_x, end_y, duration=swipe_duration)
    time.sleep(1)  # Adjust the delay between swipes if necessary

receiver_device(text="Off", description="Mobile data").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/center_group").click()
time.sleep(2)
receiver_device(scrollable=True).scroll.toEnd(20)
time.sleep(2)
receiver_device(scrollable=True).scroll.toEnd(10)
time.sleep(2)
receiver_device(resourceId="com.android.launcher3:id/icon", text="YouTube").click()
time.sleep(4)
receiver_device(resourceId="com.google.android.youtube:id/menu_item_1").click()
time.sleep(2)
receiver_device(text="Search YouTube").set_text("LAVA V5 - First impressions")
time.sleep(2)
receiver_device.press("enter")
time.sleep(5)
receiver_device(scrollable=True).scroll.toEnd(0)
time.sleep(10)
receiver_device.click(500,300)
time.sleep(10)
receiver_device(resourceId="com.google.android.youtube:id/watch_player").click()
time.sleep(1)

# Create a DataFrame to store the results
results_df = pd.DataFrame(columns=["Serial No", "Description", "Pass/Fail", "Timestamp"])

# Compose the message
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="Start chat").click()
time.sleep(2)
sender_device(text="AAAAA").click()
sender_device(text="Mobile+91 84486 97488").click()

num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
receiver_device(resourceId="com.google.android.youtube:id/fullscreen_button").click()
time.sleep(180)

# Compose the message
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="Start chat").click()
time.sleep(2)
sender_device(text="AAAAA").click()
sender_device(text="Mobile+91 84486 97488").click()

num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)
    
# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Check the sleep state in the output
output_lines = result.stdout.split('\n')
sleep_state = None
for line in output_lines:
    if "mWakefulness=" in line:
        sleep_state = line.split('=')[1]
        break

# Check the sleep state value and determine if the device is in deep sleep
if sleep_state == "Dozing" or sleep_state == "DeepSleep":
    print("Receiver device is in deep sleep mode.")
else:
    print("Receiver device is not in deep sleep mode.")
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/back").click()
time.sleep(2)
receiver_device(resourceId="com.google.android.apps.messaging:id/searchbar").click()
time.sleep(2)
if receiver_device(text="AAAAA").exists():
 print("recipient contacts are shown")
else:
 print("recipient contacts are not shown")

# Define a function to record test results
def record_result(description, pass_fail):
    global results_df
    results_df = results_df.append({"Serial No": len(results_df) + 1, "Description": description, "Pass/Fail": pass_fail, "Timestamp": datetime.now()}, ignore_index=True)

# Test 1
receiver_device(text="Off", description="Mobile data").click()
# ... (your test steps)
if condition_for_test_1:  # Replace with your actual condition
    record_result("Test 1 Description", "Pass")
else:
    record_result("Test 1 Description", "Fail")

# Test 2
# ... (similar structure for other tests)

# Save the results to an Excel file
excel_file_path = "test_results.xlsx"
results_df.to_excel(excel_file_path, index=False)

# Print a message indicating the Excel file has been saved
print(f"Results saved to {excel_file_path}")
