import uiautomator2 as ui2
import time
import subprocess
import os
import pandas as pd
from datetime import datetime, timedelta
# Device serial number of the receiver device
receiver_device_serial = "192.168.168.16:5555"

# ADB command to retrieve battery information
adb_command = ['adb', '-s', receiver_device_serial, 'shell', 'dumpsys', 'battery']

# Execute the ADB command and capture the output
result = subprocess.run(adb_command, capture_output=True, text=True)

# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)


# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# Compose the message
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="Start chat").click()
time.sleep(2)
sender_device(text="AAAAA").click()
sender_device(text="Mobile+91 84486 97488").click()

num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(5)

sender_device(resourceId="com.google.android.apps.messaging:id/action_call").click()
time.sleep(2)
receiver_device(resourceId="android:id/action0", text="ANSWER").click()
time.sleep(10)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)
# Create a list to store the results
results = []

def record_result(action, result, start_time, end_time):
    duration = end_time - start_time
    results.append({
        "Action": action,
        "Result": result,
        "Start Time": start_time,
        "End Time": end_time,
        "Duration": duration
    })

# Example action: Compose and Send Message
start_time = datetime.now()


end_time = datetime.now()
record_result("Compose and Send Message", "Success", start_time, end_time)

# Example action: Make Call
start_time = datetime.now()

sender_device(resourceId="com.google.android.apps.messaging:id/action_call").click()
time.sleep(2)
receiver_device(resourceId="android:id/action0", text="ANSWER").click()
time.sleep(10)
receiver_device(resourceId="com.google.android.dialer:id/incall_end_call").click()
time.sleep(2)

end_time = datetime.now()
record_result("Make Call", "Success", start_time, end_time)

# Repeat the same structure for other actions...

# Convert the results list to a pandas DataFrame
results_df = pd.DataFrame(results)

# Save the DataFrame to an Excel file
excel_filename = "results.xlsx"
results_df.to_excel(excel_filename, index=False)

print(f"Results saved to {excel_filename}")
