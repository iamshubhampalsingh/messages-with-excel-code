import uiautomator2 as ui2
import time
import subprocess
import openpyxl
from datetime import datetime
# Create a Device object for the sender device
sender_device = ui2.Device('cf611ff9')

# Create a Device object for the receiver device
receiver_device = ui2.Device(receiver_device_serial)

# ADB commands to turn on the receiver and sender devices' screens
receiver_turn_on_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '224']
sender_turn_on_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '224']

# ADB commands to turn off the receiver and sender devices' screens
receiver_turn_off_command = ['adb', '-s', receiver_device_serial, 'shell', 'input', 'keyevent', '26']
sender_turn_off_command = ['adb', '-s', 'cf611ff9', 'shell', 'input', 'keyevent', '26']

# ADB command to turn off the receiver device
adb_command = ["adb", "-s", receiver_device_serial, "shell", "input", "keyevent", "26"]

# Execute the ADB command
subprocess.run(adb_command)

# Compose and send messages from the sender device
sender_device(text="Messages").click()
time.sleep(2)
sender_device(text="Start chat").click()
time.sleep(2)
sender_device(text="AAAAA").click()
sender_device(text="Mobile+91 84486 97488").click()

num_runs = 10
for run in range(num_runs):
    sender_device(resourceId="com.google.android.apps.messaging:id/compose_message_text").set_text("hello")
    time.sleep(2)
    sender_device(resourceId="com.google.android.apps.messaging:id/send_message_button_container").click()
    time.sleep(2)

# Turn on the receiver device's screen
subprocess.run(receiver_turn_on_command, capture_output=True)

receiver_device.xpath('//*[@resource-id="android:id/expand_button_touch_container"]/android.widget.Button[1]/android.widget.LinearLayout[1]').click()
time.sleep(2)
receiver_device(resourceId="android:id/action0", text="REPLY").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/remote_input_text").click()
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/remote_input_text").set_text("hello")
time.sleep(2)
receiver_device(resourceId="com.android.systemui:id/remote_input_send").click()

# Define a function to log results and save to Excel
def log_result(description, status):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    result_row = [description, status, timestamp]
    results_sheet.append(result_row)
    print(f"Description: {description} | Status: {status} | Timestamp: {timestamp}")



# Create an Excel workbook and add a sheet
workbook = openpyxl.Workbook()
results_sheet = workbook.active
results_sheet.title = "Results"
results_sheet.append(["Description", "Status", "Timestamp"])



try:
    # Execute the ADB command to turn off the receiver device's screen
    subprocess.run(receiver_turn_off_command, capture_output=True)
    
  
    
    # Simulate reply action on the receiver device
    receiver_device(resourceId="android:id/action0", text="REPLY").click()
    time.sleep(2)
    receiver_device(resourceId="com.android.systemui:id/remote_input_text").click()
    time.sleep(2)
    receiver_device(resourceId="com.android.systemui:id/remote_input_text").set_text("hello")
    time.sleep(2)
    receiver_device(resourceId="com.android.systemui:id/remote_input_send").click()
    
    # Turn on the receiver device's screen
    subprocess.run(receiver_turn_on_command, capture_output=True)
except Exception as e:
    log_result("Exception - " + str(e), "Fail")



# Save the results to an Excel file
excel_filename = "results.xlsx"
workbook.save(excel_filename)
print(f"Results saved to {excel_filename}")
